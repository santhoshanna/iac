{
  "_args": [
    [
      {
        "raw": "promisify-any@2.0.1",
        "scope": null,
        "escapedName": "promisify-any",
        "name": "promisify-any",
        "rawSpec": "2.0.1",
        "spec": "2.0.1",
        "type": "version"
      },
      "C:\\Personal\\jcibts-rest-face\\node_modules\\oauth2-server"
    ]
  ],
  "_from": "promisify-any@2.0.1",
  "_id": "promisify-any@2.0.1",
  "_inCache": true,
  "_location": "/promisify-any",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "overlookmotel",
    "email": "theoverlookmotel@gmail.com"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "promisify-any@2.0.1",
    "scope": null,
    "escapedName": "promisify-any",
    "name": "promisify-any",
    "rawSpec": "2.0.1",
    "spec": "2.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/oauth2-server"
  ],
  "_resolved": "https://registry.npmjs.org/promisify-any/-/promisify-any-2.0.1.tgz",
  "_shasum": "403e00a8813f175242ab50fe33a69f8eece47305",
  "_shrinkwrap": null,
  "_spec": "promisify-any@2.0.1",
  "_where": "C:\\Personal\\jcibts-rest-face\\node_modules\\oauth2-server",
  "author": {
    "name": "Overlook Motel"
  },
  "bugs": {
    "url": "https://github.com/overlookmotel/promisify-any/issues"
  },
  "dependencies": {
    "bluebird": "^2.10.0",
    "co-bluebird": "^1.1.0",
    "is-generator": "^1.0.2"
  },
  "description": "Promisify any of: callback function, sync function, generator function, promise-returning function",
  "devDependencies": {
    "chai": "^3.2.0",
    "coveralls": "^2.11.4",
    "generator-supported": "0.0.1",
    "istanbul": "^0.3.19",
    "jshint": "^2.8.0",
    "mocha": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "403e00a8813f175242ab50fe33a69f8eece47305",
    "tarball": "https://registry.npmjs.org/promisify-any/-/promisify-any-2.0.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "f6447d6f143e8d6a0aa9dd71447f885b5d715904",
  "homepage": "https://github.com/overlookmotel/promisify-any#readme",
  "keywords": [
    "promise",
    "promisify",
    "any",
    "callback",
    "generator",
    "sync",
    "async"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/overlookmotel/promisify-any/raw/master/License"
    }
  ],
  "main": "./lib/",
  "maintainers": [
    {
      "name": "overlookmotel",
      "email": "theoverlookmotel@gmail.com"
    }
  ],
  "name": "promisify-any",
  "optionalDependencies": {},
  "readme": "# promisify-any.js\n\n# Promisify any of: callback function, sync function, generator function, promise-returning function\n\n## Current status\n\n[![NPM version](https://img.shields.io/npm/v/promisify-any.svg)](https://www.npmjs.com/package/promisify-any)\n[![Build Status](https://img.shields.io/travis/overlookmotel/promisify-any/master.svg)](http://travis-ci.org/overlookmotel/promisify-any)\n[![Dependency Status](https://img.shields.io/david/overlookmotel/promisify-any.svg)](https://david-dm.org/overlookmotel/promisify-any)\n[![Dev dependency Status](https://img.shields.io/david/dev/overlookmotel/promisify-any.svg)](https://david-dm.org/overlookmotel/promisify-any)\n[![Coverage Status](https://img.shields.io/coveralls/overlookmotel/promisify-any/master.svg)](https://coveralls.io/r/overlookmotel/promisify-any)\n\nAPI is stable and all features are tested.\n\n## What is it for?\n\nThere are plenty of modules for promisifying callback functions. But what if you are writing a module where the user provides a function as an input to your API and you want to give them flexibility to either use promises or callbacks in that function? And what about generator functions?\n\nThis module takes an input which can be any of:\n\n- Async callback function\n- Sync function\n- Promise-returning function\n- Generator function which yields promises\n\n...and turns any of the above into a promise-returning function.\n\n## Usage\n\n### Installation\n\n    npm install promisify-any\n\n### Loading\n\n```js\nvar promisify = require('promisify-any');\n```\n\n### Promisifying\n\nPass the function to be converted to `promisify`.\n\n```js\n\nfn = promisify(fn);\n\n```\n\nThe result of calling `fn` now will be a promise.\n\n```js\nfn().then(function(result) {\n    // ...\n});\n```\n\nIf the function expects arguments, the number of arguments (not including the callback) MUST be provided as a 2nd argument to `promisify`.\n\n```js\nvar fn = function(a, b, cb) {\n    return cb(null, a + b);\n};\n\nfn = promisify(fn, 2);\n```\n\nThis is so that you end up with the same function, with any of the following inputs:\n\n```js\nvar fns = [\n    function(a, b, cb) { return cb(null, a + b); },\n    function(a, b) { return a + b; },\n    function(a, b) { return Promise.resolve(a + b); },\n    function *(a, b) { return yield Promise.resolve(a + b); }\n];\n\nfns = fns.map(function(fn) {return promisify(fn, 2)});\n// fns[0] == fns[1] == fns[2] == fns[3]\n\n```\n\n`promisify-any` works out if an input function uses a callback or not, based on the number of arguments the function has. So it needs to know in advance how many arguments it *should* have!\n\n#### Async callback functions\n\nAsync callback functions are \"promisified\".\n\ne.g. Returning a value through callback:\n\n```js\nvar fn = promisify(function(cb) {\n    setImmediate(function() {\n        cb(null, 123);\n    });\n});\n\nfn().then(function(result) {\n    // result = 123\n});\n```\n\ne.g. Taking arguments (note that number of expected arguments is passed to `promisify`):\n\n```js\nvar fn = promisify(function(x, y, cb) {\n    setImmediate(function() {\n        cb(null, x + y);\n    });\n}, 2);\n\nfn(3, 4).then(function(result) {\n    // result = 7\n});\n```\n\ne.g. Returning an error through callback:\n\n```js\nvar fn = promisify(function(cb) {\n    setImmediate(function() {\n        cb(new Error('oops!'));\n    });\n});\n\nfn().catch(function(err) {\n    // err.message = 'oops!'\n});\n```\n\n#### Sync functions\n\nSync functions are turned into asynchronous promise-returning functions:\n\n```js\nvar fn = promisify(function(x, y) {\n    return x + y;\n}, 2);\n\nfn(3, 4).then(function(result) {\n    // result = 7\n});\n```\n\n```js\nvar fn = promisify(function() {\n    throw new Error('oops!');\n});\n\nfn().catch(function(err) {\n    // err.message = 'oops!'\n});\n```\n\n#### Promise-returning functions\n\nPromise-returning functions are left unchanged.\n\n```js\nvar fn = promisify(function(x, y) {\n    return Promise.resolve(x + y);\n}, 2);\n\nfn(3, 4).then(function(result) {\n    // result = 7\n});\n```\n\n#### Generator functions\n\nGenerator functions are wrapped using [co](https://www.npmjs.com/package/co) (`co.wrap()`) so that they can yield promises. The resulting function also returns a promise.\n\n```js\nvar fn = promisify(function *(x, y) {\n    var values = yield [\n        Promise.resolve(x * 10),\n        Promise.resolve(y * 10)\n    ];\n\n    return values[0] + values[1];\n}, 2);\n\nfn(3, 4).then(function(result) {\n    // result = 70\n});\n```\n\nNB Generators are only supported in node v0.11 upwards and require node to be run with the `--harmony` flag.\n\n#### Mixing sync and promise returns\n\nIn this example, a user is loaded from the database, but records are cached in a local variable, and the cached version is used first if it exists. The function may do any of:\n\n* return a promise that is asynchronously resolved\n* return a promise that is asynchronously rejected\n* return a result synchronously (from the cache)\n* throw synchronously\n\n```js\nvar cache = [];\nfunction getUserFromDb(id) {\n    if (!id) throw new Error('Must provide id');\n\n    if (cache[id]) return cache[id];\n\n    // userModel.find() returns a promise\n    return userModel.find( { where: { id: id } } ).then(function(result) {\n        if (!result) return Promise.reject(new Error('User not found'));\n\n        cache[id] = result;\n        return result;\n    };\n}\n```\n\nThis will not work if the function returns synchronously:\n\n```js\ngetUserFromDb(123).then(function(result) {\n    // do something with the result\n});\n```\n\nBut this will always work:\n\n```js\ngetUserFromDb = promisify(getUserFromDb, 1);\n\ngetUserFromDb(123).then(function(result) {\n    // do something with the result\n});\n```\n\nIt's less cumbersome to write functions in this way - returning/throwing either synchronously or asynchronously.\n\n### `promisify.generators(object)`\n\nPromisifies all methods of the object which are generators.\n\n```js\nvar obj = {\n    addOne: function *(x) {\n        return yield Promise.resolve(x + 1);\n    },\n    double: function *(x) {\n        return yield Promise.resolve(x * 2);\n    }\n};\n\npromisify.generators(obj);\n\nobj.addOne(10).then(obj.double).then(function(result) {\n    // result = 22\n});\n```\n\n### `promisify.use(Promise)`\n\nCreates a new instance of `promisify-any`, which uses the Promise implementation provided.\n\n```js\nvar Bluebird = require('bluebird');\nvar promisify = require('promisify-any').use(Bluebird);\n\n// now use `promisify-any` in the usual way\nvar fn = promisify(function() {});\n\nvar p = fn();\n\nconsole.log(p instanceof Bluebird); // true\n```\n\n## Tests\n\nUse `npm test` to run the tests or `npm run test-harmony` to include generator tests.\nUse `npm run cover` to check coverage.\n\n## Changelog\n\nSee changelog.md\n\n## Issues\n\nIf you discover a bug, please raise an issue on Github. https://github.com/overlookmotel/promisify-any/issues\n\n## Contribution\n\nPull requests are very welcome. Please:\n\n* ensure all tests pass before submitting PR\n* add an entry to changelog\n* add tests for new features\n* document new functionality/API additions in README\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/overlookmotel/promisify-any.git"
  },
  "scripts": {
    "cover": "make cover",
    "test": "make test",
    "test-harmony": "make test-harmony"
  },
  "version": "2.0.1"
}
