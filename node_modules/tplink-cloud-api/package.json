{
  "_args": [
    [
      {
        "raw": "tplink-cloud-api",
        "scope": null,
        "escapedName": "tplink-cloud-api",
        "name": "tplink-cloud-api",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Personal\\jcibts-rest-face"
    ]
  ],
  "_from": "tplink-cloud-api@latest",
  "_id": "tplink-cloud-api@0.3.1",
  "_inCache": true,
  "_location": "/tplink-cloud-api",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tplink-cloud-api_0.3.1_1523227472068_0.6591036822299543"
  },
  "_npmUser": {
    "name": "adumont",
    "email": "adumont@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tplink-cloud-api",
    "scope": null,
    "escapedName": "tplink-cloud-api",
    "name": "tplink-cloud-api",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tplink-cloud-api/-/tplink-cloud-api-0.3.1.tgz",
  "_shasum": "15f9ad1f8336fd9cb5a6ba26c159987a3c55abb4",
  "_shrinkwrap": null,
  "_spec": "tplink-cloud-api",
  "_where": "C:\\Personal\\jcibts-rest-face",
  "author": {
    "name": "Alexandre Dumont",
    "email": "adumont@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/adumont/tplink-cloud-api/issues"
  },
  "dependencies": {
    "axios": "^0.17.1",
    "babel-polyfill": "^6.26.0",
    "lodash.find": "^4.6.0",
    "uuid": "^3.1.0"
  },
  "description": "Remotely control TP-Link smartplugs (HS100, HS110) and smartbulbs (LB100, LB110, LB120, LB130) using their cloud web service (no need to be on the same wifi/lan)",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.18.2",
    "babel-plugin-syntax-async-functions": "^6.13.0",
    "babel-plugin-transform-regenerator": "^6.16.1",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-stage-0": "^6.16.0",
    "chai": "^4.1.2",
    "dotenv": "^4.0.0",
    "mocha": "^4.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-0dKeUNekJOa8QovMHxX3gSqI0gSEBjtb+w5SVkBrtQ4GbvJtgs4QpqJ87Ov9DW2VTlZMho+oPwQ+B4pX4U6R7w==",
    "shasum": "15f9ad1f8336fd9cb5a6ba26c159987a3c55abb4",
    "tarball": "https://registry.npmjs.org/tplink-cloud-api/-/tplink-cloud-api-0.3.1.tgz",
    "fileCount": 16,
    "unpackedSize": 84304
  },
  "gitHead": "78ad1c10a04dcd73f17dfe4e7283b95ca1b7e75c",
  "homepage": "http://itnerd.space",
  "keywords": [
    "tp-link",
    "tplink",
    "cloud",
    "api",
    "smartplug",
    "HS100",
    "HS110",
    "smartbulb",
    "LB100",
    "LB110",
    "LB120",
    "LB130"
  ],
  "license": "GPL-3.0",
  "main": "./distribution/tplink.js",
  "maintainers": [
    {
      "name": "adumont",
      "email": "adumont@gmail.com"
    }
  ],
  "name": "tplink-cloud-api",
  "optionalDependencies": {},
  "readme": "# Introduction\n\nThe `tplink-cloud-api` NPM module allows your to remotely control your TP-Link smartplugs (HS100, HS110) and smartbulbs (LB100, LB110, LB120, LB130) using the TP-Link cloud web service, from anywhere, without the need to be on the same wifi/lan.\n\nIt's especially useful in scenarios where you want to control your devices from public web services, like IFTTT, Thinger.io, Webtasks.io, Glitch.com...\n\nIt's based on my investigation work on the TP-Link API protocol, which I have been sharing in my blog http://itnerd.com.\n\n# Installation\n\nYou can install this module with `npm`:\n\n```bash\nnpm install --save tplink-cloud-api\n```\n\n# Usage\n\n## Authenticate\n\nFirst instanciate a TP-Link object. TermID (UUIDv4) is generated if not specified:\n\n```javascript\nlet myTPLink = await tplink.login('username@example.com', 'Password', 'TermID')\n```\n\n## Retrieve devices\n\nOnce authenticated, you can use your tplink instance to retrieve the list of your devices:\n\n```javascript\nlet deviceList = await myTPLink.getDeviceList()\n```\n## Control your devices\n\n### Smartplugs (HS100 & HS110)\n\nNow you can toggle a plug:\n\n```javascript\nawait myTPLink.getHS100(\"My Smart Plug\").toggle()\n```\n\nYou can also create an object and use it like this:\n\n```javascript\nmyPlug = myTPLink.getHS100(\"My Smart Plug \");\nresponse = await myPlug.toggle();\nconsole.log( await myPlug.get_relay_state() )\n```\n\nReplace `My Smart Plug` with the alias you gave to your plug in the Kasa app (be sure to give a different alias to each device!)\n\nInstead of `toggle()`, you can use `powerOn()` or `powerOff()`. See all available methods below.\n\nIf you want to trigger multiple plugs, you can do it like this:\n\n```javascript\nawait myTPLink.getHS100(\"My Smart Plug\").toggle();\nawait myTPLink.getHS100(\"My Smart Plug 2\").powerOn();\nawait myTPLink.getHS100(\"My Smart Plug 3\").powerOff();\nawait myTPLink.getHS100(\"My Smart Plug 4\").powerOff();\n```\n\nTo retrieve power consumption data for the HS110:\n\n```javascript\nawait myTPLink.getHS110(\"My Smart Plug\").getPowerUsage();\n```\n\n### Smartbulbs (LB100/110/120/130)\n\nIf you have an LB100/110/120, you can change it's state with:\n\n```javascript\nawait myTPLink.getLB100(\"Bedroom LB120\").transition_light_state(1, 90)\n```\n\nThe two parameters are:\n- on_off: 1 on, 0 on_off\n- brightness: 0-100\n\nIf you have an LB130, use this:\n\n```javascript\nawait myTPLink.getLB130(\"Kitchen LB130\").transition_light_state(1, 90, 150, 80);\n```\n\nThe four parameters for LB130 are:\n- on_off: 1 on, 0 on_off\n- brightness: 0-100\n- hue: 0-360           \n- saturation: 0-100\n\nFor help to choose the hue/saturation value, you can head to http://colorizer.org/.\n\n\n# Example\n\n```javascript\nvar TPLink = require('tplink-cloud-api')\nvar uuidV4 = require('uuid/v4')\n\nconst TPLINK_USER = process.env.TPLINK_USER;\nconst TPLINK_PASS = process.env.TPLINK_PASS;\nconst TPLINK_TERM = process.env.TPLINK_TERM || uuidV4();\n\nasync function main(){\n  let response\n\n  var myTPLink = await TPLink.login(TPLINK_USER, TPLINK_PASS, TPLINK_TERM);\n\n  console.log( myTPLink.getToken() )\n\n  var dl = await myTPLink.getDeviceList();\n\n  console.log( dl )\n\n  var myPlug = myTPLink.getHS100(\"My Smart Plug\");\n\n  console.log(\"deviceId=\" + myPlug.getDeviceId())\n\n  //var response = await myPlug.powerOn();\n  //console.log(\"response=\" + response );\n\n  response = await myPlug.toggle();\n  console.log(\"response=\" + response );\n\n  response = await myPlug.getSysInfo();\n  console.log(\"relay_state=\" + response.relay_state );\n  //console.log( JSON.parse(response).relay_state );\n\n  console.log( await myPlug.get_relay_state() )\n}\n\nmain();\n```\n\n# Available methods\n\n## TPLink class\n\n### login()\n\nThis *constructor* method authenticates against the TP-Link cloud API and retrieves a token.\n\n#### Parameters\n\nParameter | Specification | Description\n--------- | ------- | -----------\n`user` | String | TP-Link account user name\n`passwd` | String | TP-Link account password\n`termid` | UUIDv4 String | Your client application Terminal ID\n\n `termid` is an arbitrary value. The API expects a UUIDv4 string, but at this time it doesn't validate this.\n\n#### Returns\n\nReturns the TPLink instance that you can later use to retrieve the Device List.\n\n### getDeviceList()\n\nThis method returns an object that describe all the TP-Link devices registred to this TP-Link account.\n\nYou need to call this method once after login() in order to be able to get a particular device. Call this method every time you need to refresh the list of devices.\n\n#### Parameters\n\nNone\n\n#### Returns\n\nReturns an object that describe all the TP-Link devices registred to this TP-Link account.\n\n# Requires\nRequires Node.js > v7.7 (async)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adumont/tplink-cloud-api.git"
  },
  "scripts": {
    "build": "babel lib --out-dir distribution",
    "prepublish": "npm run build",
    "test": "npm run build && mocha --require babel-core/register"
  },
  "version": "0.3.1"
}
