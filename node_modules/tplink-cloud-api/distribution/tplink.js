'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @package     tplink-cloud-api
 * @author      Alexandre Dumont <adumont@gmail.com>
 * @copyright   (C) 2017 - Alexandre Dumont
 * @license     https://www.gnu.org/licenses/gpl-3.0.txt
 * @link        http://itnerd.space
 */

/* This file is part of tplink-cloud-api.

tplink-cloud-api is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

tplink-cloud-api is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
tplink-cloud-api. If not, see http://www.gnu.org/licenses/. */

require('babel-polyfill');

var axios = require('axios');
var uuidV4 = require('uuid/v4');
var HS100 = require("./hs100.js");
var HS110 = require("./hs110.js");
var LB100 = require("./lb100.js");
var LB130 = require("./lb130.js");
var find = require("lodash.find");

var TPLink = function () {
  function TPLink(token, termid) {
    _classCallCheck(this, TPLink);

    this.token = token;
    this.termid = termid;
  }

  _createClass(TPLink, [{
    key: 'getToken',
    value: function getToken() {
      return this.token;
    }
  }, {
    key: 'getDeviceList',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var params, request, response, deviceList;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                params = {
                  appName: 'Kasa_Android',
                  termID: this.termid,
                  appVer: '1.4.4.607',
                  ospf: 'Android+6.0.1',
                  netType: 'wifi',
                  locale: 'es_ES',
                  token: this.token
                };
                request = {
                  method: 'POST',
                  url: 'https://wap.tplinkcloud.com',
                  params: { token: this.token },
                  data: { method: "getDeviceList" }
                };
                _context.next = 4;
                return axios(request);

              case 4:
                response = _context.sent;
                deviceList = response.data.result.deviceList;

                this.deviceList = deviceList;

                return _context.abrupt('return', deviceList);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getDeviceList() {
        return _ref.apply(this, arguments);
      }

      return getDeviceList;
    }()

    // for an HS100 or HS110 smartplug

  }, {
    key: 'getHS100',
    value: function getHS100(alias) {
      return new HS100(this, find(this.deviceList, { "alias": alias }));
    }
  }, {
    key: 'getHS110',
    value: function getHS110(alias) {
      return new HS110(this, find(this.deviceList, { "alias": alias }));
    }

    // for an LB100, LB110 & LB120

  }, {
    key: 'getLB100',
    value: function getLB100(alias) {
      return new LB100(this, find(this.deviceList, { "alias": alias }));
    }

    // for an LB130 lightbulb

  }, {
    key: 'getLB130',
    value: function getLB130(alias) {
      return new LB130(this, find(this.deviceList, { "alias": alias }));
    }
  }], [{
    key: 'login',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(user, passwd) {
        var termid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uuidV4();
        var params, login_payload, request, response, token;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                params = {
                  appName: 'Kasa_Android',
                  termID: termid,
                  appVer: '1.4.4.607',
                  ospf: 'Android+6.0.1',
                  netType: 'wifi',
                  locale: 'es_ES'
                };
                login_payload = {
                  "method": "login", "url": "https://wap.tplinkcloud.com",
                  "params": {
                    "appType": "Kasa_Android",
                    "cloudPassword": passwd,
                    "cloudUserName": user,
                    "terminalUUID": termid
                  }
                };
                request = {
                  method: 'POST',
                  url: 'https://wap.tplinkcloud.com',
                  params: params,
                  data: login_payload,
                  headers: {
                    'Connection': 'Keep-Alive',
                    'User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 6.0.1; A0001 Build/M4B30X)'
                  }
                };
                _context2.next = 5;
                return axios(request);

              case 5:
                response = _context2.sent;
                token = response.data.result.token;
                return _context2.abrupt('return', new TPLink(token, termid));

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function login(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return login;
    }()
  }]);

  return TPLink;
}();

module.exports = TPLink;