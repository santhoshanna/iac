'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @package     tplink-cloud-api
 * @author      Alexandre Dumont <adumont@gmail.com>
 * @copyright   (C) 2017 - Alexandre Dumont
 * @license     https://www.gnu.org/licenses/gpl-3.0.txt
 * @link        http://itnerd.space
 */

/* This file is part of tplink-cloud-api.

tplink-cloud-api is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

tplink-cloud-api is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
tplink-cloud-api. If not, see http://www.gnu.org/licenses/. */

require('babel-polyfill');

var axios = require('axios');

var TPLinkDevice = function () {
  function TPLinkDevice(tpLink, deviceInfo) {
    _classCallCheck(this, TPLinkDevice);

    this.tpLink = tpLink;
    this.device = deviceInfo;
    this.params = {
      appName: 'Kasa_Android',
      termID: tpLink.termid,
      appVer: '1.4.4.607',
      ospf: 'Android+6.0.1',
      netType: 'wifi',
      locale: 'es_ES',
      token: tpLink.token
    };
  }

  _createClass(TPLinkDevice, [{
    key: 'getDeviceId',
    value: function getDeviceId() {
      return this.device.deviceId;
    }
  }, {
    key: 'tplink_request',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(command) {
        var payload, request, response;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                payload = {
                  "method": "passthrough",
                  "params": {
                    "deviceId": this.device.deviceId,
                    "requestData": JSON.stringify(command)
                  }
                };
                request = { method: 'POST',
                  url: this.device.appServerUrl,
                  params: this.params,
                  headers: {
                    'cache-control': 'no-cache'
                  },
                  data: payload
                };
                _context.next = 4;
                return axios(request);

              case 4:
                response = _context.sent;
                return _context.abrupt('return', JSON.stringify(response.data));

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function tplink_request(_x) {
        return _ref.apply(this, arguments);
      }

      return tplink_request;
    }()
  }]);

  return TPLinkDevice;
}();

module.exports = TPLinkDevice;