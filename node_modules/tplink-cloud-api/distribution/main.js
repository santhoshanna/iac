'use strict';

var main = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var response, myTPLink, dl, myPlug;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            response = void 0;
            _context.next = 3;
            return TPLink.login(TPLINK_USER, TPLINK_PASS, TPLINK_TERM);

          case 3:
            myTPLink = _context.sent;


            console.log(myTPLink.getToken());

            _context.next = 7;
            return myTPLink.getDeviceList();

          case 7:
            dl = _context.sent;


            console.log(dl);

            myPlug = myTPLink.getHS100("My Smart Plug");


            console.log("deviceId=" + myPlug.getDeviceId());

            //var response = await myPlug.powerOn();
            //console.log("response=" + response );

            _context.next = 13;
            return myPlug.toggle();

          case 13:
            response = _context.sent;

            console.log("response=" + response);

            _context.next = 17;
            return myPlug.getSysInfo();

          case 17:
            response = _context.sent;

            console.log("relay_state=" + response.relay_state);
            //console.log( JSON.parse(response).relay_state );

            _context.t0 = console;
            _context.next = 22;
            return myPlug.get_relay_state();

          case 22:
            _context.t1 = _context.sent;

            _context.t0.log.call(_context.t0, _context.t1);

          case 24:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function main() {
    return _ref.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * @package     tplink-cloud-api
 * @author      Alexandre Dumont <adumont@gmail.com>
 * @copyright   (C) 2017 - Alexandre Dumont
 * @license     https://www.gnu.org/licenses/gpl-3.0.txt
 * @link        http://itnerd.space
 */

/* This file is part of tplink-cloud-api.

tplink-cloud-api is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

tplink-cloud-api is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
tplink-cloud-api. If not, see http://www.gnu.org/licenses/. */

require('babel-polyfill');

var TPLink = require("./tplink.js");
var uuidV4 = require('uuid/v4');
//var HS100 = require("./hs100.js")

var TPLINK_USER = process.env.TPLINK_USER;
var TPLINK_PASS = process.env.TPLINK_PASS;
var TPLINK_TERM = process.env.TPLINK_TERM || uuidV4();

main();