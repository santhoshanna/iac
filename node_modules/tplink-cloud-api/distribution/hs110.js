'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @package     tplink-cloud-api
 * @author      Alexandre Dumont <adumont@gmail.com>
 * @copyright   (C) 2017 - Alexandre Dumont
 * @license     https://www.gnu.org/licenses/gpl-3.0.txt
 * @link        http://itnerd.space
 */

/* This file is part of tplink-cloud-api.

tplink-cloud-api is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

tplink-cloud-api is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
tplink-cloud-api. If not, see http://www.gnu.org/licenses/. */

require('babel-polyfill');

var TPLinkDevice = require('./device.js');
var HS100 = require('./hs100.js');

var HS110 = function (_HS) {
  _inherits(HS110, _HS);

  function HS110(tpLink, deviceInfo) {
    _classCallCheck(this, HS110);

    return _possibleConstructorReturn(this, (HS110.__proto__ || Object.getPrototypeOf(HS110)).call(this, tpLink, deviceInfo));
  }

  _createClass(HS110, [{
    key: 'getPowerUsage',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var r, resultParse;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _get(HS110.prototype.__proto__ || Object.getPrototypeOf(HS110.prototype), 'tplink_request', this).call(this, { "emeter": { "get_realtime": null } });

              case 2:
                r = _context.sent;
                resultParse = JSON.parse(r).result;

                if (resultParse) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt('return', null);

              case 6:
                return _context.abrupt('return', JSON.parse(resultParse.responseData).emeter.get_realtime);

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getPowerUsage() {
        return _ref.apply(this, arguments);
      }

      return getPowerUsage;
    }()
  }, {
    key: 'getDayStats',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(year, month) {
        var r, resultParse;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _get(HS110.prototype.__proto__ || Object.getPrototypeOf(HS110.prototype), 'tplink_request', this).call(this, { "emeter": { "get_daystat": { 'year': year, 'month': month } } });

              case 2:
                r = _context2.sent;
                resultParse = JSON.parse(r).result;

                if (resultParse) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt('return', null);

              case 6:
                return _context2.abrupt('return', JSON.parse(resultParse.responseData).emeter.get_daystat.day_list);

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getDayStats(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return getDayStats;
    }()
  }, {
    key: 'getMonthStats',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(year) {
        var r, resultParse;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _get(HS110.prototype.__proto__ || Object.getPrototypeOf(HS110.prototype), 'tplink_request', this).call(this, { "emeter": { "get_monthstat": { 'year': year } } });

              case 2:
                r = _context3.sent;
                resultParse = JSON.parse(r).result;

                if (resultParse) {
                  _context3.next = 6;
                  break;
                }

                return _context3.abrupt('return', null);

              case 6:
                return _context3.abrupt('return', JSON.parse(resultParse.responseData).emeter.get_monthstat.month_list);

              case 7:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getMonthStats(_x3) {
        return _ref3.apply(this, arguments);
      }

      return getMonthStats;
    }()
  }]);

  return HS110;
}(HS100);

module.exports = HS110;