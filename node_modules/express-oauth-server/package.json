{
  "_args": [
    [
      {
        "raw": "express-oauth-server",
        "scope": null,
        "escapedName": "express-oauth-server",
        "name": "express-oauth-server",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Personal\\jcibts-rest-face"
    ]
  ],
  "_from": "express-oauth-server@latest",
  "_id": "express-oauth-server@2.0.0",
  "_inCache": true,
  "_location": "/express-oauth-server",
  "_nodeVersion": "4.8.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/express-oauth-server-2.0.0.tgz_1502306634036_0.9762449329718947"
  },
  "_npmUser": {
    "name": "mjsalinger",
    "email": "mjsalinger@kinvey.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-oauth-server",
    "scope": null,
    "escapedName": "express-oauth-server",
    "name": "express-oauth-server",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-oauth-server/-/express-oauth-server-2.0.0.tgz",
  "_shasum": "57b08665c1201532f52c4c02f19709238b99a48d",
  "_shrinkwrap": null,
  "_spec": "express-oauth-server",
  "_where": "C:\\Personal\\jcibts-rest-face",
  "author": {
    "name": "Nuno Sousa",
    "email": "nfs@seegno.com"
  },
  "bugs": {
    "url": "https://github.com/seegno/express-oauth-server/issues"
  },
  "dependencies": {
    "bluebird": "^3.0.5",
    "express": "^4.13.3",
    "oauth2-server": "3.0.0"
  },
  "description": "OAuth provider for express",
  "devDependencies": {
    "body-parser": "^1.14.1",
    "jshint": "^2.8.0",
    "mocha": "^2.3.3",
    "should": "^7.1.0",
    "sinon": "^1.14.1",
    "supertest": "^0.15.0"
  },
  "directories": {},
  "dist": {
    "shasum": "57b08665c1201532f52c4c02f19709238b99a48d",
    "tarball": "https://registry.npmjs.org/express-oauth-server/-/express-oauth-server-2.0.0.tgz"
  },
  "engines": {
    "node": ">=0.11"
  },
  "gitHead": "844d602156f4a11c09a6e3c1d63da6d2721e7e36",
  "homepage": "https://github.com/seegno/express-oauth-server#readme",
  "keywords": [
    "express",
    "oauth",
    "oauth2"
  ],
  "license": "SEE LICENSE IN LICENSE",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mjsalinger",
      "email": "mjsalinger@kinvey.com"
    },
    {
      "name": "nunofgs",
      "email": "nunofgs@gmail.com"
    }
  ],
  "name": "express-oauth-server",
  "optionalDependencies": {},
  "readme": "# Express OAuth Server [![Build Status](https://travis-ci.org/oauthjs/express-oauth-server.png?branch=master)](https://travis-ci.org/oauthjs/express-oauth-server)\n\nComplete, compliant and well tested module for implementing an OAuth2 Server/Provider with [express](https://github.com/expressjs/express) in [node.js](http://nodejs.org/).\n\nThis is the express wrapper for [oauth2-server](https://github.com/oauthjs/node-oauth2-server).\n\n## Installation\n\n    $ npm install express-oauth-server\n\n## Quick Start\n\nThe module provides two middlewares - one for granting tokens and another to authorize them. `express-oauth-server` and, consequently `oauth2-server`, expect the request body to be parsed already.\nThe following example uses `body-parser` but you may opt for an alternative library.\n\n```js\nvar bodyParser = require('body-parser');\nvar express = require('express');\nvar OAuthServer = require('express-oauth-server');\n\nvar app = express();\n\napp.oauth = new OAuthServer({\n  model: {}, // See https://github.com/oauthjs/node-oauth2-server for specification\n});\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(app.oauth.authorize());\n\napp.use(function(req, res) {\n  res.send('Secret area');\n});\n\napp.listen(3000);\n```\n\n## Options\n\n```\nvar options = { \n  useErrorHandler: false, \n  continueMiddleware: false,\n}\n```\n* `useErrorHandler`\n(_type: boolean_ default: false)\n\n  If false, an error response will be rendered by this component.\n  Set this value to true to allow your own express error handler to handle the error.\n\n* `continueMiddleware`\n(_type: boolean default: false_)\n\n  The `authorize()` and `token()` middlewares will both render their \n  result to the response and end the pipeline.\n  next() will only be called if this is set to true.\n\n  **Note:** You cannot modify the response since the headers have already been sent.\n\n  `authenticate()` does not modify the response and will always call next()\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/seegno/express-oauth-server.git"
  },
  "scripts": {
    "lint": "jshint .",
    "test": "mocha --recursive test"
  },
  "version": "2.0.0"
}
